{
    "dataSources": {
        "ds_qGlYO0tD_ds_WAk6qZyN": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod | spath \"data{}\" | search \"data{}\"=u \n| spath input=_raw path=\"data{}.datatime\" output=datatime | spath input=_raw path=\"data{}.userterminal\" output=userterminal(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal)\n| eval uptime=tostring(uptime,\"duration\")\n| eval signalquality=signalquality*100\n| spath data{}{}\n| rename data{}{} as alert_codes\n| eval alert_codes=if(isnull(alert_codes) OR alert_codes=\"\", \"None\", mvindex(alert_codes, 0)) \n| eval alert_description=case(alert_codes == 66, \"high_time_obstruction\", alert_codes == 82, \"software_update_reboot_pending\", alert_codes == 50, \"ethernet_slow_10mbps\", alert_codes == 51, \"ethernet_slow_100mbps\", alert_codes == 52, \"power_supply_thermal_throttling\", alert_codes == 53, \"actuator_motor_stuck\", alert_codes == 54, \"mast_not_vertical\", alert_codes == 55, \"disabled_no_active_service_line\", alert_codes == 56, \"disabled_too_far_from_service_address\", alert_codes == 57, \"disabled_no_service_in_ocean\", alert_codes == 58, \"disabled_invalid_country\", alert_codes == 83, \"disabled_blocked_country\", alert_codes == 84, \"disabled_data_usage_exceeded_quota\", alert_codes == 89, \"disabled_cell_is_disabled\", alert_codes == 59, \"disabled_moving_while_not_mobile\", alert_codes == 60, \"disabled_moving_too_fast\", alert_codes == 61, \"power_disconnect_detected\", alert_codes == 62, \"pop_change\", alert_codes == 63, \"unable_to_align\", alert_codes == 80, \"thermal_shutdown\", alert_codes == 81, \"thermal_throttling\")\n| eval datetime = datatime/1000000000\n| eval _time=datetime\n| sort -datetime \n| eval Status = if(datetime >= relative_time(now(),\"-30m\"), if(isnull(alert_description),\"healthy\",\"online/alert\"), \"offline\")\n| eval datetime=strftime(datetime,\"%Y-%m-%d %H:%M:%S.%Q\") \n| dedup userterminal\n| eval alert_description=if(isnull(alert_description),\"No Alerts\",alert_description)\n| where userterminal = \"$input_terminal$\"\n| table alert_description\n"
            },
            "name": "Alert_description"
        },
        "ds_OENlC8pD_ds_0pFsvNoy": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod | spath \"data{}\" | search \"data{}\"=i \n| rex field=_raw \"\\\"data\\\":\\[.+?,\\\"ip-ut(?<userterminal>[^\\\"]+)\\\"\"\n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>[0-9]+)\"\n| eval datetime=strftime(datatime/1000000000,\"%Y-%m-%dT%H:%M:%S.%Q\")\n| rename data{}{} as IPAddr\n| where isnotnull(userterminal)\n| eval datetime = datatime/1000000000\n| eval _time=datetime\n| sort -datetime  \n| eval datetime=strftime(datetime,\"%Y-%m-%d %H:%M:%S.%Q\") \n| dedup userterminal\n| where userterminal =\"$input_terminal$\"\n\n| table IPAddr\n"
            },
            "name": "GetIpAddress"
        },
        "ds_jxNJncXI": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines  \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| spath output=StartDate path=data.startDate\n| spath output=PublicIP path=data.publicIp\n| eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n| where CircuitID=\"$input_circuitid$\"\n| stats latest(CircuitID) as \"Circuit ID\" latest(StartDate) as \"Start Date\" latest(PublicIP) as \"Public IP\" by \"Service Line\""
            },
            "name": "selectedServiceLine"
        },
        "ds_pFSgomMT": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines  \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| spath output=StartDate path=data.startDate\n| spath output=PublicIP path=data.publicIp\n| eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n| stats latest(CircuitID) as \"Circuit ID\" latest(StartDate) as \"Start Date\" latest(PublicIP) as \"Public IP\" by \"Service Line\"\n| join type=left \n    [ search index=sat_leo_starlink_prod sourcetype=\"device_terminals\" earliest=\"10/01/2024:00:00:00\"\n      | spath path=data{}.userTerminalId output=userterminal\n      | spath path=data{}.nickname output=nickname\n      | spath path=data{}.kitSerialNumber output=kitserialnumber\n      | spath path=data{}.dishSerialNumber output=dishserialnumber\n      | spath path=data{}.serviceLineNumber output=\"Service Line\"\n      | spath path=data{}.active output=terminal_active\n      ]\n| join type=left userterminal\n    [\n   search index=sat_leo_starlink_prod sourcetype=\"device_telemetry\" \n| spath \"data{}\" \n| search \"data{}\"=u\n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>-?\\d+(?:\\.+\\d*)?),\\\"ut(?<userterminal>.+?)\\\",(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal)\n| eval uptime=tostring(uptime,\"duration\")\n| eval signalquality=signalquality*100\n| spath data{}{}\n| rename data{}{} as alert_codes\n| eval alert_codes=if(isnull(alert_codes) or alert_codes=\"\", \"none\", mvindex(alert_codes, 0)) \n| eval alert_description=case(alert_codes == 66, \"high_time_obstruction\", alert_codes == 82, \"software_update_reboot_pending\", alert_codes == 50, \"ethernet_slow_10mbps\", alert_codes == 51, \"ethernet_slow_100mbps\", alert_codes == 52, \"power_supply_thermal_throttling\", alert_codes == 53, \"actuator_motor_stuck\", alert_codes == 54, \"mast_not_vertical\", alert_codes == 55, \"disabled_no_active_service_line\", alert_codes == 56, \"disabled_too_far_from_service_address\", alert_codes == 57, \"disabled_no_service_in_ocean\", alert_codes == 58, \"disabled_invalid_country\", alert_codes == 83, \"disabled_blocked_country\", alert_codes == 84, \"disabled_data_usage_exceeded_quota\", alert_codes == 89, \"disabled_cell_is_disabled\", alert_codes == 59, \"disabled_moving_while_not_mobile\", alert_codes == 60, \"disabled_moving_too_fast\", alert_codes == 61, \"power_disconnect_detected\", alert_codes == 62, \"pop_change\", alert_codes == 63, \"unable_to_align\", alert_codes == 80, \"thermal_shutdown\", alert_codes == 81, \"thermal_throttling\")\n| eval datetime = datatime/1000000000\n| eval _time=datetime\n| sort -datetime  \n| eval status = if(datetime >= relative_time(now(),\"-15m\"), if(isnull(alert_description),\"healthy\",\"online/alert\"), \"offline\")\n| eval datetime=strftime(datetime,\"%y-%m-%d %h:%m:%s.%q\") \n    \n    ]\n| where terminal_active=\"true\"\n| where  \"Service Line\"!=\"null\"\n| where sourcetype=\"device_telemetry\"\n\n| table \"Service Line\" \"Circuit ID\"",
                "queryParameters": {
                    "earliest": "$global_time.earliest$",
                    "latest": "$global_time.latest$"
                }
            },
            "name": "CircuitIDList"
        },
        "ds_uz53wuhm": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| search \"CircuitID\"=\"$input_circuitid$\"\n| join type=inner \"Service Line\"\n    [ search index=\"sat_leo_starlink_prod\" sourcetype=\"device_terminals\"\n      | spath path=data{}.kitSerialNumber output=kitserialnumber\n      | spath path=data{}.serviceLineNumber output=\"Service Line\"\n      | spath path=data{}.active output=terminal_active\n      | where terminal_active=\"true\" AND isnotnull(kitserialnumber)\n    ]\n| dedup kitserialnumber\n| table kitserialnumber"
            },
            "name": "kitSerialByServiceLine"
        },
        "ds_dSGfPX5j_ds_gedGow2h_ds_jlvSZ0qt": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod sourcetype=\"device_terminals\" \n      | spath path=data{}.userTerminalId output=userterminal\n      | spath path=data{}.nickname output=nickname\n      | spath path=data{}.kitSerialNumber output=kitserialnumber\n      | spath path=data{}.dishSerialNumber output=dishserialnumber\n      | spath path=data{}.serviceLineNumber output=servicelinenumber\n      | spath path=data{}.active output=terminal_active\n| where servicelinenumber!=\"null\"  \n| where terminal_active = \"true\"\n| where kitserialnumber=\"$input_kitserial$\"\n| dedup kitserialnumber \n\n\n"
            },
            "name": "GetFieldsforSelectedKit"
        },
        "ds_hvMT4gje": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod sourcetype=\"device_terminals\" \n      | spath path=data{}.userTerminalId output=userterminal\n      | spath path=data{}.nickname output=nickname\n      | spath path=data{}.kitSerialNumber output=kitserialnumber\n      | spath path=data{}.dishSerialNumber output=dishserialnumber\n      | spath path=data{}.serviceLineNumber output=servicelinenumber\n      | spath path=data{}.active output=terminal_active\n| join type=left userterminal\n    [\n   search index=sat_leo_starlink_prod sourcetype=\"device_telemetry\" \n| spath \"data{}\" \n| search \"data{}\"=u\n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>-?\\d+(?:\\.+\\d*)?),\\\"ut(?<userterminal>.+?)\\\",(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal)\n| eval days=floor(uptime/86400)\n| eval hours=floor((uptime - days*86400)/3600)\n| eval minutes=floor((uptime - days*86400 - hours*3600)/60)\n| eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)\n| eval milliseconds=round((uptime - floor(uptime))*1000) \n| eval uptime_formatted = days . \" days \" . hours . \":\" . minutes . \":\" . seconds . \".\" . milliseconds\n\n| eval rebootdays=floor(secondsuntilreboot/86400)\n| eval reboothours=floor((secondsuntilreboot - rebootdays*86400)/3600)\n| eval rebootminutes=floor((secondsuntilreboot - rebootdays*86400 - reboothours*3600)/60)\n| eval rebootseconds=floor(secondsuntilreboot - rebootdays*86400 - reboothours*3600 - rebootminutes*60)\n| eval secondsuntilreboot_formatted = rebootdays . \" days \" . reboothours . \":\" . rebootminutes . \":\" . rebootseconds \n\n\n\n| eval signalquality=signalquality*100\n| spath data{}{}\n| rename data{}{} as alert_codes\n| eval alert_codes=if(isnull(alert_codes) or alert_codes=\"\", \"none\", mvindex(alert_codes, 0)) \n| eval alert_description=case(alert_codes == 66, \"high_time_obstruction\", alert_codes == 82, \"software_update_reboot_pending\", alert_codes == 50, \"ethernet_slow_10mbps\", alert_codes == 51, \"ethernet_slow_100mbps\", alert_codes == 52, \"power_supply_thermal_throttling\", alert_codes == 53, \"actuator_motor_stuck\", alert_codes == 54, \"mast_not_vertical\", alert_codes == 55, \"disabled_no_active_service_line\", alert_codes == 56, \"disabled_too_far_from_service_address\", alert_codes == 57, \"disabled_no_service_in_ocean\", alert_codes == 58, \"disabled_invalid_country\", alert_codes == 83, \"disabled_blocked_country\", alert_codes == 84, \"disabled_data_usage_exceeded_quota\", alert_codes == 89, \"disabled_cell_is_disabled\", alert_codes == 59, \"disabled_moving_while_not_mobile\", alert_codes == 60, \"disabled_moving_too_fast\", alert_codes == 61, \"power_disconnect_detected\", alert_codes == 62, \"pop_change\", alert_codes == 63, \"unable_to_align\", alert_codes == 80, \"thermal_shutdown\", alert_codes == 81, \"thermal_throttling\")\n| eval datetime = datatime/1000000000\n| eval reboottime=if(secondsuntilreboot=-1,if(like(activealerts,\"%82%\"),\"Will reboot between 2 AM and 4 AM Local time\",\"No reboot scheduled\"),secondsuntilreboot+datetime)\n| eval secondsuntilreboot_formatted=if(secondsuntilreboot=-1,reboottime,secondsuntilreboot_formatted)\n| eval _time=datetime\n| sort -datetime  \n| eval status = if(datetime >= relative_time(now(),\"-15m\"), if(isnull(alert_description),\"healthy\",\"online/alert\"), \"offline\")\n| eval datetime=strftime(datetime,\"%Y-%m-%d %H:%M:%S\") \n| eval reboottime=if(reboottime>0,strftime(reboottime,\"%Y-%m-%d %H:%M:%S\") ,reboottime)\n]\n\n| where terminal_active=\"true\"\n| where  servicelinenumber!=\"null\"\n| where sourcetype=\"device_telemetry\"\n| where kitserialnumber=\"$input_kitserial$\"\n| table status,runningsoftwareversion,uptime_formatted,datetime,activealerts,userterminal,obstructionpercenttime,secondsuntilreboot_formatted,reboottime\n\n",
                "queryParameters": {
                    "earliest": "$global_time.earliest$",
                    "latest": "$global_time.latest$"
                }
            },
            "name": "getStatusFromKitSerial"
        },
        "ds_Sf0k0vgB": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \n| spath \"data{}\" \n| search \"data{}\"=u \n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>-?\\d+(?:\\.+\\d*)?),\\\"ut(?<userterminal>.+?)\\\",(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal) \n| eval uptime=tostring(uptime,\"duration\")\n| eval pingdroprateavg=pingdroprateavg*100\n| eval signalquality=signalquality*100\n| eval datetime = datatime/1000000000 \n| eval _time=datetime \n| eval status = if(datetime >= relative_time(now(),\"-30m\"), if(isnull(alert_description),\"healthy\",\"online/alert\"), \"offline\") \n| eval datetime=strftime(datetime,\"%y-%m-%d %h:%m:%s.%q\")\n| where userterminal=\"$input_terminal$\" \n| eval \"Downlink Throughput\"= downlinkthroughput, \"Uplink Throughput\"=uplinkthroughput,\"Signal Quality\"=signalquality,\"Ping Drop Rate\"=pingdroprateavg, \"Obstruction Percent Time\"=obstructionpercenttime,\"Ping Latency\"=pinglatencymsavg, Time=_time\n| eval Time=strftime(Time,\"%Y-%m-%d %H:%M:%S\")\n| stats latest(\"Downlink Throughput\"),latest(\"Uplink Throughput\"), latest(\"Signal Quality\"),latest(\"Ping Drop Rate\"),latest(\"Obstruction Percent Time\"),latest(\"Ping Latency\") by Time \n\n",
                "queryParameters": {
                    "earliest": "$token_datatime.earliest$",
                    "latest": "$token_datatime.latest$"
                }
            },
            "name": "GraphsOnSelectedTerminal"
        },
        "ds_zXrxOjxe": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=\"device_routers\" | spath \"data.routerId\"\n| sort -_time\n| dedup data.routerId\n| sort -data.lastBonded\n| where data.userTerminalId=\"$input_terminal$\"\n| eval Time=_time, \"Router ID\" = data.routerId, \"Direct Link\" = data.directLinkToDish, \"Hardware Version\"=data.hardwareVersion, \"Last Bound\"= data.lastBonded\n| table Time, \"Router ID\", \"Direct Link\", \"Hardware Version\",\"Last Bound\""
            },
            "name": "GetRouters"
        },
        "ds_yOImzogi": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod sourcetype=\"device_telemetry\" \n| spath \"data{}\" \n| search \"data{}\"=u\n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>-?\\d+(?:\\.+\\d*)?),\\\"ut(?<userterminal>.+?)\\\",(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal)\n| eval days=floor(uptime/86400)\n| eval hours=floor((uptime - days*86400)/3600)\n| eval minutes=floor((uptime - days*86400 - hours*3600)/60)\n| eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)\n| eval milliseconds=round((uptime - floor(uptime))*1000) \n| eval uptime_formatted = days . \" days \" . hours . \":\" . minutes . \":\" . seconds . \".\" . milliseconds\n| eval Uptime=uptime_formatted\n| eval signalquality=signalquality*100\n| spath data{}{}\n| rename data{}{} as alert_codes\n| eval alert_codes=if(isnull(alert_codes) or alert_codes=\"\", \"none\", mvindex(alert_codes, 0)) \n| eval alert_description=case(alert_codes == 66, \"high_time_obstruction\", alert_codes == 82, \"software_update_reboot_pending\", alert_codes == 50, \"ethernet_slow_10mbps\", alert_codes == 51, \"ethernet_slow_100mbps\", alert_codes == 52, \"power_supply_thermal_throttling\", alert_codes == 53, \"actuator_motor_stuck\", alert_codes == 54, \"mast_not_vertical\", alert_codes == 55, \"disabled_no_active_service_line\", alert_codes == 56, \"disabled_too_far_from_service_address\", alert_codes == 57, \"disabled_no_service_in_ocean\", alert_codes == 58, \"disabled_invalid_country\", alert_codes == 83, \"disabled_blocked_country\", alert_codes == 84, \"disabled_data_usage_exceeded_quota\", alert_codes == 89, \"disabled_cell_is_disabled\", alert_codes == 59, \"disabled_moving_while_not_mobile\", alert_codes == 60, \"disabled_moving_too_fast\", alert_codes == 61, \"power_disconnect_detected\", alert_codes == 62, \"pop_change\", alert_codes == 63, \"unable_to_align\", alert_codes == 80, \"thermal_shutdown\", alert_codes == 81, \"thermal_throttling\", alert_codes == 83, \"disabled_blocked_country\", alert_codes == 84, \"disabled_data_usage_exceeded_quota\", alert_codes == 89, \"disabled_cell_is_disabled\", alert_codes == 93, \"disabled_roam_restricted\", alert_codes == 94, \"disabled_unknown_location\", alert_codes == 95, \"disabled_account_disabled\")\n| eval datetime = datatime/1000000000\n| eval _time=datetime\n| eval datetime=strftime(datetime,\"%Y-%m-%d %H:%M:%S\") \n| search activealerts!=\"\" OR uptime <= 1200\n| where userterminal=\"$input_terminal$\"\n| sort -_time\n| eval Time=datetime,\"Serviceline #\"=servicelinenumber,\"Kit S/N\"=kitserialnumber,\"Dish S/N\"=dishserialnumber, \"Terminal S/N\"=userterminal,\"Downlink Throughput\"=downlinkthroughput,\"Uplink Throughput\"=uplinkthroughput,\"Average Ping Drop Rate\"=pingdroprateavg,\"Average Latency\"=pinglatencymsavg,\"Obstruction Time %\"=obstructionpercenttime,Uptime=uptime_formatted, \"Signal Quality\"=signalquality, \"Seconds to Reboot\"=secondsuntilreboot, \"Running Software\"=runningsoftwareversion,\"Alert Codes\"=alert_codes, \"Alert Description\"=alert_description\n| eval \"Active Codes\"=activealerts \n| transaction userterminal maxspan=59m maxpause=1m \n| eval Time=max(Time)\n| eval Uptime=max(Uptime) \n| table Time,\"Active Codes\",\"Alert Description\" Uptime",
                "queryParameters": {
                    "earliest": "$token_datatime.earliest$",
                    "latest": "$token_datatime.latest$"
                }
            },
            "name": "alertCodeHistory"
        },
        "ds_terminalByCircuitID": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| search \"CircuitID\"=\"$input_circuitid$\"\n| join type=inner \"Service Line\"\n    [ search index=\"sat_leo_starlink_prod\" sourcetype=\"device_terminals\"\n      | spath path=data{}.userTerminalId output=userterminal\n      | spath path=data{}.serviceLineNumber output=\"Service Line\"\n      | spath path=data{}.active output=terminal_active\n      | where terminal_active=\"true\" AND isnotnull(userterminal)\n    ]\n| dedup userterminal\n| table userterminal"
            },
            "name": "TerminalListByCircuitID"
        },
        "ds_WzgCU9BN": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod sourcetype=\"device_telemetry\" earliest=1\n| spath \"data{}\" \n| search \"data{}\"=u\n| rex field=_raw \"\\\"data\\\":\\[.+?,(?<datatime>-?\\d+(?:\\.+\\d*)?),\\\"ut(?<userterminal>.+?)\\\",(?<downlinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<uplinkthroughput>-?\\d+(?:\\.+\\d*)?),(?<pingdroprateavg>-?\\d+(?:\\.+\\d*)?),(?<pinglatencymsavg>[0-9]+),(?<obstructionpercenttime>-?\\d+(?:\\.+\\d*)?),(?<uptime>-?\\d+(?:\\.+\\d*)?),(?<signalquality>-?\\d+(?:\\.+\\d*)?),(?<h3cellid>-?\\d+(?:\\.+\\d*)?),(?<secondsuntilreboot>-?\\d+(?:\\.+\\d*)?),\\\"(?<runningsoftwareversion>.+?)\\\",\" \n| rex field=_raw \"\\[(?<activealerts>(?:\\d+,)*\\d*)\\]\"\n| where isnotnull(userterminal)\n| eval days=floor(uptime/86400)\n| eval hours=floor((uptime - days*86400)/3600)\n| eval minutes=floor((uptime - days*86400 - hours*3600)/60)\n| eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)\n| eval milliseconds=round((uptime - floor(uptime))*1000) \n| eval uptime_formatted = days . \" days \" . hours . \":\" . minutes . \":\" . seconds . \".\" . milliseconds\n| eval signalquality=signalquality*100\n| eval days=floor(uptime/86400)\n| eval hours=floor((uptime - days*86400)/3600)\n| eval minutes=floor((uptime - days*86400 - hours*3600)/60)\n| eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)\n| eval milliseconds=round((uptime - floor(uptime))*1000) \n| eval uptime_formatted = days . \" days \" . hours . \":\" . minutes . \":\" . seconds . \".\" . milliseconds\n| eval datetime = datatime/1000000000 \n| eval datetime=strftime(datetime,\"%Y-%m-%d %H:%M:%S\") \n| search userterminal=\"$input_terminal$\"\n| stats earliest(datetime) as \"Earliest Date\", latest(datetime) as \"Latest Date\" by userterminal",
                "queryParameters": {
                    "earliest": "0",
                    "latest": ""
                }
            },
            "name": "dataEarliestLatest"
        },
        "ds_GGAgJJdg": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path```\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=now()\n| eval startDate=strftime(startDate,\"%F\")\n| where UsageDate=startDate \n| stats max(billingCycles.totalPriorityGB) as priorityGB by serviceLineNumber\n| join type=left left=L Right=R where L.serviceLineNumber=R.data.serviceLineNumber\n      [search index=\"sat_leo_starlink_np\" sourcetype=device_servicelines  \"data.active\"=true \n      | spath output=\"Service Line\" path=data.serviceLineNumber\n      | spath output=\"CircuitID\" path=data.nickname\n      | spath output=StartDate path=data.startDate\n      | spath output=PublicIP path=data.publicIp\n      | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n      ]\n| rename R.CircuitID as \"Circuit ID\"\n\n| search \"Circuit ID\"=\"$input_circuitid$\"\n\n| rename L.priorityGB as \"Priority GBytes\"\n| table \"Circuit ID\" \"Priority GBytes\"",
                "queryParameters": {
                    "earliest": "-24h@h",
                    "latest": "now"
                }
            },
            "name": "CurrentUsage"
        },
        "ds_b1ZTPrPq": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@mon\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path```\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=strftime(relative_time(now(),\"@mon\"),\"%F\")\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| where UsageDate>=startDate and UsageDate<stopDate\n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber UsageDate\n| stats sum(priorityGB) by UsageDate serviceLineNumber\n| join type=left left=L Right=R where L.serviceLineNumber=R.data.serviceLineNumber\n      [search index=\"sat_leo_starlink_np\" sourcetype=device_servicelines  \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| spath output=StartDate path=data.startDate\n| spath output=PublicIP path=data.publicIp\n| eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n]\n| search R.CircuitID=\"$input_circuitid$\"\n| rename L.UsageDate as \"Usage Date\"\n| rename L.sum(priorityGB) as \"Priority GBytes\"\n\n| table \"Usage Date\" \"Priority GBytes\"",
                "queryParameters": {
                    "earliest": "@mon",
                    "latest": "now"
                }
            },
            "name": "dailyUsageByPriorityGB"
        },
        "ds_BD8cdxwy": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year \n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| eval UsageDate=strptime(UsageDate, \"%F\") \n| eval _time=UsageDate \n| eval UsageDate=strftime(UsageDate,\"%F\") \n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber _time\n| where serviceLineNumber=\"$input_serviceline$\"\n| predict \"priorityGB\" as prediction algorithm=LLP5 holdback=16 future_timespan=60 period=7 upper95=upper95 lower95=lower95\n| rename upper95(prediction) as upper95 lower95(prediction) as lower95\n| eval prediction=max(0,prediction), upper95=max(0,upper95), lower95=max(0, lower95)\n| where _time>=relative_time(now(),\"-60d@mon\") and _time<relative_time(now(),\"+30d@mon\")\n| where _time>=relative_time(now(),\"@mon\")\n| eval combined_gbytes = if(isnull(priorityGB),'prediction', priorityGB)\n| streamstats sum(combined_gbytes) as PredictedGBytes\n| eval PredictedGBytes=tostring(PredictedGBytes,\"commas\")\n| eval priorityGB=tostring(priorityGB,\"commas\")\n| rename PredictedGBytes as \"Predicted GBytes\"\n| rename priorityGB as \"Priority Gbytes\"\n| table _time \"Priority Gbytes\" \"Predicted GBytes\"",
                "queryParameters": {
                    "earliest": "@mon",
                    "latest": "now"
                }
            },
            "name": "predictionQuery"
        },
        "ds_Q9EFL5rv": {
            "type": "ds.search",
            "options": {
                "query": "index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines  \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| search \"CircuitID\"=\"$input_circuitid$\"\n| table \"Service Line\""
            },
            "name": "serviceLine"
        },
        "ds_dXFiOnXB": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year\n| join type=left left=circuit right=location where circuit.location=location.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year\n    ]\n    | join type=left left=L right=customer where L.location.customer=customer.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year\n     ]\n| rename L.* as *\n| search customer.customername=\"Frontline\" OR customer.customername=\"Verizon Wireless\" OR customer.customername=\"Satellite Solutions Group\"\n| search circuit.circuitalias=\"$input_circuitid$\"\n| table customer.customername "
            },
            "name": "search_customer_name"
        },
        "ds_6RI9XGKh": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year\n| join type=left left=circuit right=location where circuit.location=location.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year\n    ]\n    | join type=left left=L right=customer where L.location.customer=customer.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year\n     ]\n| rename L.* as *\n| search customer.customername=\"Frontline\" OR customer.customername=\"Verizon Wireless\" OR customer.customername=\"Satellite Solutions Group\"\n| search circuit.circuitalias=\"$input_circuitid$\"\n| table ```circuit.circuitalias``` location.sitename ```location.division customer.customername location.sitetype```"
            },
            "name": "Search_1"
        }
    },
    "visualizations": {
        "viz_alertcodehistoryid": {
            "type": "splunk.table",
            "title": "Alert Code History",
            "dataSources": {
                "primary": "ds_yOImzogi"
            },
            "eventHandlers": [],
            "options": {
                "columnFormat": {
                    "_time": {
                        "width": 246
                    }
                },
                "count": 15
            },
            "hideWhenNoData": true
        },
        "viz_alertcodeid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Alerts Codes",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('status')",
                "majorColor": "> majorValue | rangeValue(majorColorEditorConfig)",
                "sparklineDisplay": "off",
                "trendDisplay": "off"
            },
            "context": {
                "majorColorEditorConfig": [
                    {
                        "value": "#118832",
                        "to": 0
                    },
                    {
                        "value": "#D41F1F",
                        "from": 0
                    }
                ]
            },
            "hideWhenNoData": true
        },
        "viz_signalqualityid": {
            "type": "splunk.column",
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Signal Quality",
            "showProgressBar": false,
            "showLastUpdated": false,
            "options": {
                "y": "> primary | frameBySeriesNames('latest(Signal Quality)')",
                "legendDisplay": "off",
                "yAxisTitleText": "Signal Quality"
            },
            "hideWhenNoData": true
        },
        "viz_servicelinedisplay": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_jxNJncXI"
            },
            "title": "Selected Service Line",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('Service Line')"
            }
        },
        "viz_obsctructionchartid": {
            "type": "splunk.column",
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Obstruction",
            "showProgressBar": false,
            "showLastUpdated": false,
            "context": {
                "gaugeColorEditorConfig": [
                    {
                        "value": "#118832",
                        "to": 0.27
                    },
                    {
                        "value": "#D41F1F",
                        "from": 0.27
                    }
                ],
                "backgroundColorEditorConfig": [
                    {
                        "value": "#118832",
                        "to": 0.27
                    },
                    {
                        "value": "#D41F1F",
                        "from": 0.27
                    }
                ]
            },
            "options": {
                "y": "> primary | frameBySeriesNames('latest(Obstruction Percent Time)')",
                "legendDisplay": "off",
                "yAxisTitleText": "Obstruction Percent Time"
            },
            "description": "Actual % is value / 100",
            "hideWhenNoData": true
        },
        "viz_ipaddressid": {
            "type": "splunk.table",
            "dataSources": {
                "primary": "ds_OENlC8pD_ds_0pFsvNoy"
            },
            "title": "IP Addresses",
            "options": {
                "tableFormat": {
                    "rowBackgroundColors": "> table | seriesByIndex(0) | pick(tableAltRowBackgroundColorsByTheme)"
                },
                "backgroundColor": "> themes.defaultBackgroundColor"
            },
            "hideWhenNoData": true
        },
        "viz_latencyid": {
            "type": "splunk.column",
            "options": {
                "y": "> primary | frameBySeriesNames('latest(Ping Latency)')",
                "legendDisplay": "off",
                "yAxisTitleText": "Latency (ms)"
            },
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Latency (ms)",
            "hideWhenNoData": true,
            "showProgressBar": false,
            "showLastUpdated": false
        },
        "viz_pingdropid": {
            "type": "splunk.column",
            "options": {
                "y": "> primary | frameBySeriesNames('latest(Ping Drop Rate)')",
                "legendDisplay": "off",
                "yAxisTitleText": "Drop Rate %"
            },
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Ping Drop Rate",
            "hideWhenNoData": true,
            "showProgressBar": false,
            "showLastUpdated": false
        },
        "viz_ulthroughputid": {
            "type": "splunk.line",
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Uplink",
            "showProgressBar": false,
            "showLastUpdated": false,
            "options": {
                "xAxisLabelRotation": -45,
                "xAxisLineVisibility": "show",
                "showXMajorGridLines": true,
                "yAxisLineVisibility": "show",
                "showYMinorGridLines": true,
                "y": "> primary | frameBySeriesNames('latest(Uplink Throughput)')",
                "yAxisTitleText": "Throughput (Mbps)",
                "legendDisplay": "off",
                "xAxisTitleVisibility": "hide",
                "seriesColorsByField": {},
                "lineWidth": 3
            },
            "hideWhenNoData": true
        },
        "viz_uptimeid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Uptime",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('uptime_formatted')",
                "majorFontSize": 14
            },
            "hideWhenNoData": true
        },
        "viz_softwareversionid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Software Version",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('runningsoftwareversion')",
                "majorFontSize": 14
            },
            "hideWhenNoData": true
        },
        "viz_lastupdateid": {
            "type": "splunk.singlevalue",
            "options": {
                "majorFontSize": 16,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('datetime')"
            },
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Last Update Time",
            "hideWhenNoData": true
        },
        "viz_obstructionid": {
            "type": "splunk.singlevalueradial",
            "options": {
                "majorValue": "> primary | seriesByName('obstructionpercenttime') | lastPoint()",
                "trendValue": "> primary | seriesByName('obstructionpercenttime') | delta(-2)",
                "majorColor": "> majorValue | rangeValue(majorColorEditorConfig)",
                "numberPrecision": 2,
                "trendDisplay": "off",
                "unit": "%"
            },
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Current Obstruction %",
            "description": "",
            "hideWhenNoData": true,
            "showProgressBar": false,
            "showLastUpdated": false,
            "context": {
                "majorColorEditorConfig": [
                    {
                        "value": "#118832",
                        "to": 0.24
                    },
                    {
                        "value": "#CBA700",
                        "from": 0.24,
                        "to": 0.27
                    },
                    {
                        "value": "#D41F1F",
                        "from": 0.27
                    }
                ]
            }
        },
        "viz_antennasnid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_dSGfPX5j_ds_gedGow2h_ds_jlvSZ0qt"
            },
            "title": "Antenna S/N",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('dishserialnumber')"
            }
        },
        "viz_statusid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Status",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('status')"
            },
            "hideWhenNoData": true
        },
        "viz_terminalnumberid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_dSGfPX5j_ds_gedGow2h_ds_jlvSZ0qt"
            },
            "title": "Selected Terminal",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('userterminal')"
            }
        },
        "viz_alertdescid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_qGlYO0tD_ds_WAk6qZyN"
            },
            "title": "Alerts Description",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('alert_description')"
            },
            "hideWhenNoData": true
        },
        "viz_dlthroughputid": {
            "type": "splunk.line",
            "dataSources": {
                "primary": "ds_Sf0k0vgB"
            },
            "title": "Downlink (Correct)",
            "showProgressBar": false,
            "showLastUpdated": false,
            "options": {
                "xAxisLabelRotation": -45,
                "xAxisLineVisibility": "show",
                "showXMajorGridLines": true,
                "yAxisLineVisibility": "show",
                "showYMinorGridLines": true,
                "y": "> primary | frameBySeriesNames('latest(Downlink Throughput)')",
                "yAxisTitleText": "Throughput (Mbps)",
                "legendDisplay": "off",
                "xAxisTitleVisibility": "hide",
                "nullValueDisplay": "zero",
                "lineWidth": 3,
                "seriesColorsByField": {}
            },
            "hideWhenNoData": true
        },
        "viz_kitnumberid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_uz53wuhm"
            },
            "title": "Kit Number",
            "options": {
                "majorFontSize": 14
            },
            "eventHandlers": []
        },
        "viz_routerinfoid": {
            "type": "splunk.table",
            "title": "Router Information",
            "dataSources": {
                "primary": "ds_zXrxOjxe"
            },
            "hideWhenNoData": true
        },
        "viz_timerebootid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Time until Reboot",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('secondsuntilreboot_formatted')"
            },
            "hideWhenNoData": true
        },
        "viz_rebootid": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_hvMT4gje"
            },
            "title": "Reboot Time",
            "options": {
                "majorFontSize": 14,
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('reboottime')"
            },
            "hideWhenNoData": true
        },
        "viz_hgcPalUB": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_WzgCU9BN"
            },
            "title": "Earliest Telemetry Data",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('Earliest Date')"
            },
            "hideWhenNoData": true,
            "showProgressBar": false,
            "showLastUpdated": false
        },
        "viz_rupjqFBA": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_WzgCU9BN"
            },
            "title": "Latest Telemetry Data",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('Latest Date')"
            },
            "hideWhenNoData": true,
            "showProgressBar": false,
            "showLastUpdated": false
        },
        "viz_RuSW3wJk": {
            "type": "splunk.singlevalue",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('Priority GBytes')",
                "unit": "GBytes",
                "numberPrecision": 2
            },
            "dataSources": {
                "primary": "ds_GGAgJJdg"
            },
            "title": "Monthly Usage"
        },
        "viz_UyInoqLB": {
            "type": "splunk.column",
            "dataSources": {
                "primary": "ds_BD8cdxwy"
            },
            "title": "Daily Usage & Predicted Usage",
            "hideWhenNoData": true,
            "options": {
                "overlayFields": [
                    "Predicted GBytes"
                ],
                "xAxisLabelRotation": -45,
                "legendDisplay": "top",
                "xAxisTitleVisibility": "hide",
                "y": "> primary | frameBySeriesNames('Priority Gbytes')",
                "y2": "> primary | frameBySeriesNames('Predicted GBytes')",
                "dataValuesDisplay": "minmax",
                "y2AxisTitleText": "",
                "showRoundedY2AxisLabels": false
            }
        },
        "viz_ebxTIzZT": {
            "type": "splunk.rectangle",
            "options": {
                "fillColor": "transparent",
                "strokeColor": "transparent"
            }
        },
        "viz_vfkokvSd": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_dXFiOnXB"
            },
            "title": "Customer"
        },
        "viz_R1HdWAEU": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_6RI9XGKh"
            },
            "title": "Site Name"
        }
    },
    "inputs": {
        "input_global_trp": {
            "type": "input.timerange",
            "options": {
                "token": "global_time",
                "defaultValue": "-24h@h,now"
            },
            "title": "Time Range for Data Pool"
        },
        "input_terminalid": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "token": "input_terminal",
                "selectFirstSearchResult": true
            },
            "title": "Select Terminal",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_terminalByCircuitID"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [],
                "label": ">primary | seriesByName(\"userterminal\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"userterminal\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        },
        "input_datatimeid": {
            "options": {
                "defaultValue": "-24h@h,now",
                "token": "token_datatime"
            },
            "title": "Display Time Range",
            "type": "input.timerange"
        },
        "input_servicelineid": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "token": "input_circuitid",
                "selectFirstSearchResult": true
            },
            "title": "Select Circuit ID",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_pFSgomMT"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [],
                "label": ">primary | seriesByName(\"Circuit ID\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"Circuit ID\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        },
        "input_kitserialid": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "token": "input_kitserial",
                "selectFirstSearchResult": true
            },
            "title": "Kit Serial Number",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_uz53wuhm"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [],
                "label": ">primary | seriesByName(\"kitserialnumber\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"kitserialnumber\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        },
        "input_sfEQXcGA": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "token": "input_serviceline",
                "selectFirstSearchResult": true
            },
            "title": "Input Service Line",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_Q9EFL5rv"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [],
                "label": ">primary | seriesByName(\"Service Line\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"Service Line\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        }
    },
    "layout": {
        "type": "absolute",
        "options": {
            "width": 1440,
            "height": 960
        },
        "structure": [
            {
                "item": "input_sfEQXcGA",
                "type": "input",
                "position": {
                    "x": 0,
                    "y": 0,
                    "w": 350,
                    "h": 84
                }
            },
            {
                "item": "viz_servicelinedisplay",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 84,
                    "w": 206,
                    "h": 84
                }
            },
            {
                "item": "viz_softwareversionid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 168,
                    "w": 206,
                    "h": 172
                }
            },
            {
                "item": "viz_ebxTIzZT",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 263,
                    "w": 206,
                    "h": 73
                }
            },
            {
                "item": "viz_rebootid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 336,
                    "w": 410,
                    "h": 85
                }
            },
            {
                "item": "input_datatimeid",
                "type": "input",
                "position": {
                    "x": 0,
                    "y": 421,
                    "w": 520,
                    "h": 95
                }
            },
            {
                "item": "viz_dlthroughputid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 514,
                    "w": 700,
                    "h": 260
                }
            },
            {
                "item": "viz_signalqualityid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 774,
                    "w": 700,
                    "h": 365
                }
            },
            {
                "item": "viz_pingdropid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 1139,
                    "w": 700,
                    "h": 370
                }
            },
            {
                "item": "viz_alertcodehistoryid",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 1509,
                    "w": 1440,
                    "h": 392
                }
            },
            {
                "item": "viz_UyInoqLB",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 1901,
                    "w": 1440,
                    "h": 400
                }
            },
            {
                "item": "viz_antennasnid",
                "type": "block",
                "position": {
                    "x": 206,
                    "y": 84,
                    "w": 204,
                    "h": 84
                }
            },
            {
                "item": "viz_statusid",
                "type": "block",
                "position": {
                    "x": 206,
                    "y": 168,
                    "w": 204,
                    "h": 95
                }
            },
            {
                "item": "viz_timerebootid",
                "type": "block",
                "position": {
                    "x": 206,
                    "y": 263,
                    "w": 204,
                    "h": 73
                }
            },
            {
                "item": "input_kitserialid",
                "type": "input",
                "position": {
                    "x": 350,
                    "y": 0,
                    "w": 350,
                    "h": 84
                }
            },
            {
                "item": "viz_kitnumberid",
                "type": "block",
                "position": {
                    "x": 410,
                    "y": 84,
                    "w": 290,
                    "h": 84
                }
            },
            {
                "item": "viz_alertcodeid",
                "type": "block",
                "position": {
                    "x": 410,
                    "y": 168,
                    "w": 290,
                    "h": 95
                }
            },
            {
                "item": "viz_alertdescid",
                "type": "block",
                "position": {
                    "x": 410,
                    "y": 263,
                    "w": 290,
                    "h": 73
                }
            },
            {
                "item": "viz_routerinfoid",
                "type": "block",
                "position": {
                    "x": 410,
                    "y": 336,
                    "w": 290,
                    "h": 85
                }
            },
            {
                "item": "input_terminalid",
                "type": "input",
                "position": {
                    "x": 700,
                    "y": 0,
                    "w": 740,
                    "h": 84
                }
            },
            {
                "item": "viz_terminalnumberid",
                "type": "block",
                "position": {
                    "x": 700,
                    "y": 84,
                    "w": 332,
                    "h": 84
                }
            },
            {
                "item": "viz_ipaddressid",
                "type": "block",
                "position": {
                    "x": 700,
                    "y": 168,
                    "w": 191,
                    "h": 253
                }
            },
            {
                "item": "viz_ulthroughputid",
                "type": "block",
                "position": {
                    "x": 700,
                    "y": 517,
                    "w": 740,
                    "h": 257
                }
            },
            {
                "item": "viz_obsctructionchartid",
                "type": "block",
                "position": {
                    "x": 700,
                    "y": 774,
                    "w": 740,
                    "h": 365
                }
            },
            {
                "item": "viz_latencyid",
                "type": "block",
                "position": {
                    "x": 700,
                    "y": 1139,
                    "w": 740,
                    "h": 370
                }
            },
            {
                "item": "viz_rupjqFBA",
                "type": "block",
                "position": {
                    "x": 891,
                    "y": 294,
                    "w": 173,
                    "h": 127
                }
            },
            {
                "item": "viz_hgcPalUB",
                "type": "block",
                "position": {
                    "x": 891,
                    "y": 168,
                    "w": 173,
                    "h": 126
                }
            },
            {
                "item": "viz_uptimeid",
                "type": "block",
                "position": {
                    "x": 1032,
                    "y": 84,
                    "w": 205,
                    "h": 84
                }
            },
            {
                "item": "viz_vfkokvSd",
                "type": "block",
                "position": {
                    "x": 1060,
                    "y": 170,
                    "w": 173,
                    "h": 126
                }
            },
            {
                "item": "viz_obstructionid",
                "type": "block",
                "position": {
                    "x": 1064,
                    "y": 294,
                    "w": 173,
                    "h": 127
                }
            },
            {
                "item": "viz_lastupdateid",
                "type": "block",
                "position": {
                    "x": 1237,
                    "y": 84,
                    "w": 203,
                    "h": 84
                }
            },
            {
                "item": "viz_RuSW3wJk",
                "type": "block",
                "position": {
                    "x": 1237,
                    "y": 295,
                    "w": 203,
                    "h": 126
                }
            },
            {
                "item": "viz_R1HdWAEU",
                "type": "block",
                "position": {
                    "x": 1237,
                    "y": 168,
                    "w": 203,
                    "h": 127
                }
            }
        ],
        "globalInputs": [
            "input_global_trp",
            "input_servicelineid"
        ]
    },
    "title": "DS - Starlink Terminal Telemetry 1",
    "description": "Telemetry from terminals",
    "defaults": {
        "dataSources": {
            "ds.search": {
                "options": {
                    "queryParameters": {
                        "latest": "$global_time.latest$",
                        "earliest": "$global_time.earliest$"
                    }
                }
            }
        }
    }
}
