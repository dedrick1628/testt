<form version="1.1" theme="dark">
  <label>Starlink Map</label>
  <search id="base_search">
    <query>
      index=sat_leo_starlink_prod sourcetype="device_terminals" 
| spath path=data{}.userTerminalId output=userterminal
| spath path=data{}.nickname output=nickname
| spath path=data{}.kitSerialNumber output=kitserialnumber
| spath path=data{}.dishSerialNumber output=dishserialnumber
| spath path=data{}.serviceLineNumber output=servicelinenumber
| spath path=data{}.active output=terminal_active 

| join type=left left=terminal right=telemetry where terminal.userterminal = telemetry.userterminal
    [ search index=sat_leo_starlink_prod sourcetype="device_telemetry" 
   | spath "data{}" 
   | search "data{}"=u
   | rex field=_raw "\"data\":\[.+?,(?&lt;datatime&gt;-?\d+(?:\.+\d*)?),\"ut(?&lt;userterminal&gt;.+?)\",(?&lt;downlinkthroughput&gt;-?\d+(?:\.+\d*)?),(?&lt;uplinkthroughput&gt;-?\d+(?:\.+\d*)?),(?&lt;pingdroprateavg&gt;-?\d+(?:\.+\d*)?),(?&lt;pinglatencymsavg&gt;[0-9]+),(?&lt;obstructionpercenttime&gt;-?\d+(?:\.+\d*)?),(?&lt;uptime&gt;-?\d+(?:\.+\d*)?),(?&lt;signalquality&gt;-?\d+(?:\.+\d*)?),(?&lt;h3cellid&gt;-?\d+(?:\.+\d*)?),(?&lt;secondsuntilreboot&gt;-?\d+(?:\.+\d*)?),\"(?&lt;runningsoftwareversion&gt;.+?)\"," 
   | rex field=_raw "\[(?&lt;activealerts&gt;(?:\d+,)*\d*)\]"
   | where isnotnull(userterminal)
   | eval days=floor(uptime/86400)
   | eval hours=floor((uptime - days*86400)/3600)
   | eval minutes=floor((uptime - days*86400 - hours*3600)/60)
   | eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)
   | eval milliseconds=round((uptime - floor(uptime))*1000) 
   | eval uptime_formatted = days . " days " . hours . ":" . minutes . ":" . seconds . "." . milliseconds
   | eval signalquality=signalquality*100
   | spath data{}{}
   | rename data{}{} as alert_codes
   | eval alert_codes=if(isnull(alert_codes) or alert_codes="", "none", mvindex(alert_codes, 0)) 
   | eval alert_description=case(alert_codes == 66, "high_time_obstruction", alert_codes == 82, "software_update_reboot_pending", alert_codes == 50, "ethernet_slow_10mbps", alert_codes == 51, "ethernet_slow_100mbps", alert_codes == 52, "power_supply_thermal_throttling", alert_codes == 53, "actuator_motor_stuck", alert_codes == 54, "mast_not_vertical", alert_codes == 55, "disabled_no_active_service_line", alert_codes == 56, "disabled_too_far_from_service_address", alert_codes == 57, "disabled_no_service_in_ocean", alert_codes == 58, "disabled_invalid_country", alert_codes == 83, "disabled_blocked_country", alert_codes == 84, "disabled_data_usage_exceeded_quota", alert_codes == 89, "disabled_cell_is_disabled", alert_codes == 59, "disabled_moving_while_not_mobile", alert_codes == 60, "disabled_moving_too_fast", alert_codes == 61, "power_disconnect_detected", alert_codes == 62, "pop_change", alert_codes == 63, "unable_to_align", alert_codes == 80, "thermal_shutdown", alert_codes == 81, "thermal_throttling")
   | eval datetime = datatime/1000000000
   | eval _time=datetime
   | eval status = if(_time &gt;= relative_time(now(),"-15m"), if(isnull(alert_description),"Healthy","online/alert"), "offline")
   | sort -datetime  
   | eval datetime=strftime(datetime,"%Y-%m-%d %H:%M:%S")
    ]
| search terminal.servicelinenumber!=null
| search terminal.terminal_active="true"
| table *

    </query>
  </search>
  <fieldset submitButton="false" autoRun="true"></fieldset>
  <row>
    <panel>
      <title>Selected Circuits</title>
      <input type="dropdown" token="input_filter_circuit">
        <label>Select Circuit ID</label>
        <choice value="">All</choice>
        <default></default>
        <fieldForLabel>CircuitID</fieldForLabel>
        <fieldForValue>CircuitID</fieldForValue>
        <search base="base_search">
          <query>| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| eval Status=if(isnull(Status),"No Data",Status)
| eval state=split("$input_status$",",")
| eval state1=trim(mvindex(state,0)), state2=trim(mvindex(state,1)),state3=trim(mvindex(state,2)), state4=trim(mvindex(state,3)) 
| where Status=state1 OR Status=state2 OR Status=state3 OR Status=state4
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
| eval description = "Circuit ID: ". CircuitID ."Customer: ". Customer
| eval tooltip = "Service Line:". ServiceLine ." Kit S/N ". KitSN ." Status: ". Status ." Last Telemetry: ". TelemetryTime
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| eval layerDescription=case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| table CircuitID ServiceLine KitSN Status Alerts Customer Division</query>
        </search>
      </input>
      <input type="dropdown" token="input_filter_division">
        <label>Select Division</label>
        <choice value="">All</choice>
        <default></default>
        <fieldForLabel>Division</fieldForLabel>
        <fieldForValue>Division</fieldForValue>
        <search base="base_search">
          <query>| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| eval Status=if(isnull(Status),"No Data",Status)
| eval state=split("$input_status$",",")
| eval state1=trim(mvindex(state,0)), state2=trim(mvindex(state,1)),state3=trim(mvindex(state,2)), state4=trim(mvindex(state,3)) 
| where Status=state1 OR Status=state2 OR Status=state3 OR Status=state4
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
| eval description = "Circuit ID: ". CircuitID ."Customer: ". Customer
| eval tooltip = "Service Line:". ServiceLine ." Kit S/N ". KitSN ." Status: ". Status ." Last Telemetry: ". TelemetryTime
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| eval layerDescription=case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| table CircuitID ServiceLine KitSN Status Alerts Customer Division</query>
        </search>
      </input>
      <input type="dropdown" token="input_filter_customer">
        <label>Select Customer</label>
        <choice value="">All</choice>
        <default></default>
        <fieldForLabel>Customer</fieldForLabel>
        <fieldForValue>Customer</fieldForValue>
        <search base="base_search">
          <query>| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| eval Status=if(isnull(Status),"No Data",Status)
| eval state=split("$input_status$",",")
| eval state1=trim(mvindex(state,0)), state2=trim(mvindex(state,1)),state3=trim(mvindex(state,2)), state4=trim(mvindex(state,3)) 
| where Status=state1 OR Status=state2 OR Status=state3 OR Status=state4
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
| eval description = "Circuit ID: ". CircuitID ."Customer: ". Customer
| eval tooltip = "Service Line:". ServiceLine ." Kit S/N ". KitSN ." Status: ". Status ." Last Telemetry: ". TelemetryTime
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| eval layerDescription=case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| table CircuitID ServiceLine KitSN Status Alerts Customer Division</query>
        </search>
      </input>
      <input type="checkbox" token="input_status">
        <label>Select Status</label>
        <choice value="Healthy,">Healthy</choice>
        <choice value="online,">Online/Alert</choice>
        <choice value="offline,">Offline</choice>
        <choice value="No Data">No Current Data</choice>
        <default>No Data</default>
        <initialValue>No Data</initialValue>
      </input>
      <table>
        <search base="base_search">
          <query>| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
   | where CircuitID like "%$input_filter_circuit$%"
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| search Customer="$input_filter_customer$" Division="$input_filter_division$"
| eval Status=if(isnull(Status),"No Data",Status)
| eval state=split("$input_status$",",")
| eval state1=trim(mvindex(state,0)), state2=trim(mvindex(state,1)),state3=trim(mvindex(state,2)), state4=trim(mvindex(state,3)) 
| where Status=state1 OR Status=state2 OR Status=state3 OR Status=state4
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
| eval description = "Circuit ID: ". CircuitID ."Customer: ". Customer
| eval tooltip = "Service Line:". ServiceLine ." Kit S/N ". KitSN ." Status: ". Status ." Last Telemetry: ". TelemetryTime
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| eval layerDescription=case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| table CircuitID ServiceLine KitSN Status Alerts Customer Division  ELong NLat
| rename ELong as "Longitude", NLat as "Latitude"</query>
        </search>
        <option name="count">15</option>
        <option name="dataOverlayMode">heatmap</option>
        <option name="drilldown">cell</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">false</option>
        <drilldown>
          <link target="_blank">/app/sat_access/terminal_telemetry?input_circuit=$row.CircuitID$</link>
        </drilldown>
      </table>
    </panel>
    <panel>
      <title>Map View</title>
      <input type="dropdown" token="input_circuit" searchWhenChanged="true">
        <label>Select Circuit ID</label>
        <fieldForLabel>CircuitID</fieldForLabel>
        <fieldForValue>CircuitID</fieldForValue>
        <search base="base_search">
          <query>| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| eval Status=if(isnull(Status),"No Data",Status)
| eval state=split("$input_status$",",")
| eval state1=trim(mvindex(state,0)), state2=trim(mvindex(state,1)),state3=trim(mvindex(state,2)), state4=trim(mvindex(state,3)) 
| where Status=state1 OR Status=state2 OR Status=state3 OR Status=state4
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
| eval description = "Circuit ID: ". CircuitID ."Customer: ". Customer
| eval tooltip = "Service Line:". ServiceLine ." Kit S/N ". KitSN ." Status: ". Status ." Last Telemetry: ". TelemetryTime
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| eval layerDescription=case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%Offline%"),"red",Status="No Data","grey")
| table CircuitID ServiceLine KitSN Status Alerts Customer Division</query>
        </search>
        <choice value="">All</choice>
        <default></default>
      </input>
      <viz type="leaflet_maps_app.maps-plus">
        <title>Selected Circuits</title>
        <search>
          <query>index=sat_leo_starlink_prod sourcetype="device_terminals" 
| spath path=data{}.userTerminalId output=userterminal
| spath path=data{}.nickname output=nickname
| spath path=data{}.kitSerialNumber output=kitserialnumber
| spath path=data{}.dishSerialNumber output=dishserialnumber
| spath path=data{}.serviceLineNumber output=servicelinenumber
| spath path=data{}.active output=terminal_active 

| join type=left left=terminal right=telemetry where terminal.userterminal = telemetry.userterminal
    [ search index=sat_leo_starlink_prod sourcetype="device_telemetry" 
   | spath "data{}" 
   | search "data{}"=u
   | rex field=_raw "\"data\":\[.+?,(?&lt;datatime&gt;-?\d+(?:\.+\d*)?),\"ut(?&lt;userterminal&gt;.+?)\",(?&lt;downlinkthroughput&gt;-?\d+(?:\.+\d*)?),(?&lt;uplinkthroughput&gt;-?\d+(?:\.+\d*)?),(?&lt;pingdroprateavg&gt;-?\d+(?:\.+\d*)?),(?&lt;pinglatencymsavg&gt;[0-9]+),(?&lt;obstructionpercenttime&gt;-?\d+(?:\.+\d*)?),(?&lt;uptime&gt;-?\d+(?:\.+\d*)?),(?&lt;signalquality&gt;-?\d+(?:\.+\d*)?),(?&lt;h3cellid&gt;-?\d+(?:\.+\d*)?),(?&lt;secondsuntilreboot&gt;-?\d+(?:\.+\d*)?),\"(?&lt;runningsoftwareversion&gt;.+?)\"," 
   | rex field=_raw "\[(?&lt;activealerts&gt;(?:\d+,)*\d*)\]"
   | where isnotnull(userterminal)
   | eval days=floor(uptime/86400)
   | eval hours=floor((uptime - days*86400)/3600)
   | eval minutes=floor((uptime - days*86400 - hours*3600)/60)
   | eval seconds=floor(uptime - days*86400 - hours*3600 - minutes*60)
   | eval milliseconds=round((uptime - floor(uptime))*1000) 
   | eval uptime_formatted = days . " days " . hours . ":" . minutes . ":" . seconds . "." . milliseconds   | spath data{}{}
   | eval signalquality=signalquality*100
   | rename data{}{} as alert_codes
   | eval alert_codes=if(isnull(alert_codes) or alert_codes="", "none", mvindex(alert_codes, 0)) 
   | eval alert_description=case(alert_codes == 66, "high_time_obstruction", alert_codes == 82, "software_update_reboot_pending", alert_codes == 50, "ethernet_slow_10mbps", alert_codes == 51, "ethernet_slow_100mbps", alert_codes == 52, "power_supply_thermal_throttling", alert_codes == 53, "actuator_motor_stuck", alert_codes == 54, "mast_not_vertical", alert_codes == 55, "disabled_no_active_service_line", alert_codes == 56, "disabled_too_far_from_service_address", alert_codes == 57, "disabled_no_service_in_ocean", alert_codes == 58, "disabled_invalid_country", alert_codes == 83, "disabled_blocked_country", alert_codes == 84, "disabled_data_usage_exceeded_quota", alert_codes == 89, "disabled_cell_is_disabled", alert_codes == 59, "disabled_moving_while_not_mobile", alert_codes == 60, "disabled_moving_too_fast", alert_codes == 61, "power_disconnect_detected", alert_codes == 62, "pop_change", alert_codes == 63, "unable_to_align", alert_codes == 80, "thermal_shutdown", alert_codes == 81, "thermal_throttling")
   | eval datetime = datatime/1000000000
   | eval _time=datetime
   | eval status = if(_time &gt;= relative_time(now(),"-15m"), if(isnull(alert_description),"Healthy","online/alert"), "offline")
   | sort -datetime  
   | eval datetime=strftime(datetime,"%Y-%m-%d %H:%M:%S")
    ]

| search terminal.servicelinenumber!=null
| search terminal.terminal_active="true"
| join type=left left=x right=sl where x.terminal.servicelinenumber=sl.data.serviceLineNumber
  [ search index="sat_leo_starlink_prod" sourcetype=device_servicelines  "data.active"=true 
   | spath output="Service Line" path=data.serviceLineNumber
   | spath output="CircuitID" path=data.nickname
   | spath output=StartDate path=data.startDate
   | spath output=PublicIP path=data.publicIp
   | eval StartDate=strftime(strptime(StartDate,"%F"),"%F")
   | where CircuitID like "%$input_circuit$%"
    ]
| rename x.* as *

| join type=left left=x right=prov where x.sl.CircuitID = prov.circuit.circuitalias

    [search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year
      | join type=left left=circuit right=location where circuit.location=location.@id
      [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year
      ]
      | join type=left left=L right=customer where L.location.customer=customer.@id
      [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year
      ]
| rename L.* as *]
| rename x.* as *
| rename prov.* as *
| stats latest("sl.Service Line") as ServiceLine latest(terminal.kitserialnumber) as KitSN latest(customer.customername) as Customer latest(location.division) as Division latest(location.sitename) as SiteName latest(location.northlatitude) as NLat latest(location.eastlongitude) as ELong  latest(telemetry.activealerts) as Alerts latest(telemetry.h3cellid) as H3cell latest(telemetry.status) as Status latest(telemetry.uptime_formatted) as Uptime latest(telemetry.datetime) as TelemetryTime latest(alert_description) as AlertDesc by circuit.circuitalias
| eval Status=if(isnull(Status),"No Data",Status)
```| search Status="Healthy" OR Status="online/alert" OR Status="Offline"```
| eval Location="N". NLat ." E". ELong
| eval Location=if(isnull(H3cell),Location,H3cell)
| rename circuit.circuitalias as CircuitID
| eval latitude=if(isnull(NLat),1.0,NLat)
| eval longitude=if(isnull(ELong),-1.0,ELong)
| eval NLat=tonumber(NLat), ELong=tonumber(ELong)
```| eval description = "Circuit ID: ". CircuitID ."&lt;br&gt;". "Customer: ". Customer```
| eval tooltip = "&lt;b&gt;Service Line:&lt;/b&gt;". ServiceLine ."&lt;br&gt;"."&lt;b&gt;Kit S/N&lt;/b&gt;". KitSN ."&lt;br&gt;"."&lt;b&gt;Status:&lt;/b&gt;" . Status ."&lt;br&gt;"."&lt;b&gt;Last Telemetry:&lt;/b&gt;". TelemetryTime
| eval icon=case(like(Status,"%Healthy%"),"standard-icon", like(Status, "%online/alert%"),"standard-icon",like(Status,"%Offline%"),"exclamation-triangle",like(Status,"%Data%"),"exclamation-triangle")
| eval markerColor = case(like(Status,"%Healthy%"),"green", like(Status, "%online/alert%"),"orange",like(Status,"%offline%"),"purple",like(Status,"%Data%"),"gray")
| eval layerDescription= case(like(Status,"%Healthy%"),"Online", like(Status, "%online/alert%"),"Online",like(Status,"%offline%"),"Offline",like(Status,"%Data%"),"No Data")

| table latitude, longitude  description tooltip  Status markerColor icon layerDescription</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="drilldown">all</option>
        <option name="height">655</option>
        <option name="leaflet_maps_app.maps-plus.allPopups">0</option>
        <option name="leaflet_maps_app.maps-plus.animate">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitAndZoom">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitAndZoomDelay">500</option>
        <option name="leaflet_maps_app.maps-plus.bingMaps">0</option>
        <option name="leaflet_maps_app.maps-plus.bingMapsLabelLanguage">en-US</option>
        <option name="leaflet_maps_app.maps-plus.bingMapsTileLayer">CanvasLight</option>
        <option name="leaflet_maps_app.maps-plus.cluster">1</option>
        <option name="leaflet_maps_app.maps-plus.contextMenu">1</option>
        <option name="leaflet_maps_app.maps-plus.criticalThreshold">80</option>
        <option name="leaflet_maps_app.maps-plus.defaultHeight">600</option>
        <option name="leaflet_maps_app.maps-plus.disableClusteringAtZoom">0</option>
        <option name="leaflet_maps_app.maps-plus.drilldown">0</option>
        <option name="leaflet_maps_app.maps-plus.drilldownAction">dblclick</option>
        <option name="leaflet_maps_app.maps-plus.fullScreen">0</option>
        <option name="leaflet_maps_app.maps-plus.googlePlacesPosition">topleft</option>
        <option name="leaflet_maps_app.maps-plus.googlePlacesSearch">0</option>
        <option name="leaflet_maps_app.maps-plus.googlePlacesZoomLevel">12</option>
        <option name="leaflet_maps_app.maps-plus.heatmapBlur">15</option>
        <option name="leaflet_maps_app.maps-plus.heatmapColorGradient">{"0.4":"blue","0.6":"cyan","0.7":"lime","0.8":"yellow","1":"red"}</option>
        <option name="leaflet_maps_app.maps-plus.heatmapEnable">0</option>
        <option name="leaflet_maps_app.maps-plus.heatmapMaxPointIntensity">1.0</option>
        <option name="leaflet_maps_app.maps-plus.heatmapMinOpacity">1.0</option>
        <option name="leaflet_maps_app.maps-plus.heatmapOnly">0</option>
        <option name="leaflet_maps_app.maps-plus.heatmapRadius">25</option>
        <option name="leaflet_maps_app.maps-plus.i18nLanguage">en</option>
        <option name="leaflet_maps_app.maps-plus.layerControl">1</option>
        <option name="leaflet_maps_app.maps-plus.layerControlCollapsed">1</option>
        <option name="leaflet_maps_app.maps-plus.mapCenterLat">39.50</option>
        <option name="leaflet_maps_app.maps-plus.mapCenterLon">-98.35</option>
        <option name="leaflet_maps_app.maps-plus.mapCenterZoom">6</option>
        <option name="leaflet_maps_app.maps-plus.mapTile">http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</option>
        <option name="leaflet_maps_app.maps-plus.maxClusterRadius">80</option>
        <option name="leaflet_maps_app.maps-plus.maxSpiderfySize">100</option>
        <option name="leaflet_maps_app.maps-plus.maxZoom">19</option>
        <option name="leaflet_maps_app.maps-plus.measureActiveColor">#00ff00</option>
        <option name="leaflet_maps_app.maps-plus.measureCompletedColor">#0066ff</option>
        <option name="leaflet_maps_app.maps-plus.measureIconPosition">topright</option>
        <option name="leaflet_maps_app.maps-plus.measureLocalization">en</option>
        <option name="leaflet_maps_app.maps-plus.measurePrimaryAreaUnit">acres</option>
        <option name="leaflet_maps_app.maps-plus.measurePrimaryLengthUnit">feet</option>
        <option name="leaflet_maps_app.maps-plus.measureSecondaryAreaUnit">sqmiles</option>
        <option name="leaflet_maps_app.maps-plus.measureSecondaryLengthUnit">miles</option>
        <option name="leaflet_maps_app.maps-plus.measureTool">1</option>
        <option name="leaflet_maps_app.maps-plus.minZoom">1</option>
        <option name="leaflet_maps_app.maps-plus.multiplePopups">0</option>
        <option name="leaflet_maps_app.maps-plus.pathColorList">#0003F0,#D43C29,darkgreen,0xe2d400,darkred,#23A378</option>
        <option name="leaflet_maps_app.maps-plus.pathRenderer">svg</option>
        <option name="leaflet_maps_app.maps-plus.pathSplitInterval">60</option>
        <option name="leaflet_maps_app.maps-plus.pathSplits">0</option>
        <option name="leaflet_maps_app.maps-plus.permanentTooltip">0</option>
        <option name="leaflet_maps_app.maps-plus.playbackSpeed">100</option>
        <option name="leaflet_maps_app.maps-plus.playbackTickLength">50</option>
        <option name="leaflet_maps_app.maps-plus.rangeOneBgColor">#B5E28C</option>
        <option name="leaflet_maps_app.maps-plus.rangeOneFgColor">#6ECC39</option>
        <option name="leaflet_maps_app.maps-plus.rangeThreeBgColor">#FD9C73</option>
        <option name="leaflet_maps_app.maps-plus.rangeThreeFgColor">#F18017</option>
        <option name="leaflet_maps_app.maps-plus.rangeTwoBgColor">#F1D357</option>
        <option name="leaflet_maps_app.maps-plus.rangeTwoFgColor">#F0C20C</option>
        <option name="leaflet_maps_app.maps-plus.refreshInterval">0</option>
        <option name="leaflet_maps_app.maps-plus.renderer">svg</option>
        <option name="leaflet_maps_app.maps-plus.scrollWheelZoom">1</option>
        <option name="leaflet_maps_app.maps-plus.showPathLines">0</option>
        <option name="leaflet_maps_app.maps-plus.showPlayback">0</option>
        <option name="leaflet_maps_app.maps-plus.showPlaybackDateControl">1</option>
        <option name="leaflet_maps_app.maps-plus.showPlaybackPlayControl">1</option>
        <option name="leaflet_maps_app.maps-plus.showPlaybackSliderControl">1</option>
        <option name="leaflet_maps_app.maps-plus.showProgress">1</option>
        <option name="leaflet_maps_app.maps-plus.singleMarkerMode">0</option>
        <option name="leaflet_maps_app.maps-plus.spiderfyDistanceMultiplier">1</option>
        <option name="leaflet_maps_app.maps-plus.splunkVersionCheck">1</option>
        <option name="leaflet_maps_app.maps-plus.stickyTooltip">1</option>
        <option name="leaflet_maps_app.maps-plus.warningThreshold">55</option>
        <option name="refresh.display">progressbar</option>
        <option name="trellis.enabled">0</option>
        <option name="trellis.scales.shared">1</option>
        <option name="trellis.size">medium</option>
        <drilldown>
          <set token="input_map_circuit">$row.CircuitID$</set>
        </drilldown>
      </viz>
    </panel>
  </row>
</form>
