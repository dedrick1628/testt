{
    "dataSources": {
        "ds_naUPoTdg": {
            "type": "ds.savedSearch",
            "options": {
                "ref": "PriorityGBytesForecastCumulative-WorkInProgress"
            },
            "name": "Table search"
        },
        "ds_QJ0mC9KV": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" billingCycles.dailyDataUsage.priorityGB > 0 earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=$reportMonthTok|s$\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| eval stopDate=if(startDate=\"2024-12-31\",stopDate=\"2025-12-31\",stopDate)\n| where UsageDate>=startDate and UsageDate<stopDate\n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by UsageDate serviceLineNumber \n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| rename LLL.LL.starlink.* as *\n| stats count(serviceLineNumber) as Count by UsageDate",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "Production dB - Sites Per Day search"
        },
        "ds_lQWmxpr3": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path```\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=$reportMonthTok|s$\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| eval stopDate=if(startDate=\"2024-12-31\",stopDate=\"2025-12-31\",stopDate)\n| where UsageDate>=startDate and UsageDate<stopDate\n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber UsageDate\n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| rename LLL.LL.starlink.* as *\n| stats sum(priorityGB) as \"Priority GBytes\" by UsageDate",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "usageDailyPriortyGB"
        },
        "ds_j3Djhaz4_ds_xGilFeS6": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path```\n| spath output=totalPriorityGBytes path=billingCycles.totalPriorityGB\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=$reportMonthTok|s$\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| eval stopDate=if(startDate=\"2024-12-31\",stopDate=\"2025-12-31\",stopDate)\n| where UsageDate>=startDate and UsageDate<stopDate\n| stats max(totalPriorityGBytes) as priorityGB by serviceLineNumber\n| join type=left left=L Right=R where L.serviceLineNumber=R.data.serviceLineNumber\n      [search index=\"sat_leo_starlink_np\" sourcetype=device_servicelines  \"data.active\"=true \n| spath output=\"Service Line\" path=data.serviceLineNumber\n| spath output=\"CircuitID\" path=data.nickname\n| spath output=StartDate path=data.startDate\n| spath output=PublicIP path=data.publicIp\n| eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n]\n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| rename LLL.LL.starlink.* as *\n| sort - priorityGB\n| rename CircuitID as \"Circuit ID\"\n| rename priorityGB as \"Priority GBytes\"\n| head 20\n| table \"Circuit ID\" \"Priority GBytes\"",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "usageByServiceLineTop20"
        },
        "ds_pT7XFpER_ds_j3Djhaz4_ds_xGilFeS6": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year \n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path``` \n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\") \n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\") \n| where UsageDate=strftime(now(),\"%F\") \n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by UsageDate serviceLineNumber \n    ``` \n| stats sum(priorityGB) by serviceLineNumber UsageDate``` \n| join type=left left=L Right=R where L.serviceLineNumber=R.data.serviceLineNumber \n    [ search index=\"sat_leo_starlink_np\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"Service Line\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")\n        ] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| rename LLL.LL.starlink.* as *\n| rename CircuitID as \"Circuit ID\" \n| rename priorityGB as \"Priority GBytes\" \n| rename UsageData as \"Usage Date\" \n| sort -\"Priority GBytes\" \n| head 10 \n| table \"Circuit ID\" \"Priority GBytes\"",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "usageByCircuitIDTodayTop10"
        },
        "ds_9Obr8Fit": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_np\"billingCycles.dailyDataUsage.date\"=\"*\" \n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| spath output=EndDate path=billingCycles.endDate\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=\"2025-01-01\"\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| where UsageDate>=startDate\n| eval Month=strftime(UsageDate, \"@mon\")\n| stats max(billingCycles.totalPriorityGB) as \"Total Priority GBytes\" by serviceLineNumber EndDate\n| dedup serviceLineNumber EndDate\n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| stats sum(\"LLL.LL.starlink.Total Priority GBytes\") by LLL.LL.starlink.EndDate \n| stats sum(sum(\"LLL.LL.starlink.Total Priority GBytes\")) as \"TotalUsage\" \n| eval \"Total Usage\"=tostring(TotalUsage,\"commas\").\" GBytes\"",
                "queryParameters": {
                    "earliest": "$global_time.earliest$",
                    "latest": "$global_time.latest$"
                }
            },
            "name": "DataCalcsByPriorityGB"
        },
        "ds_NndZmh4f": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_np\"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| spath output=EndDate path=billingCycles.endDate\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=\"2025-01-01\"\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| where UsageDate>=startDate\n| eval Month=strftime(UsageDate, \"@mon\")\n| stats max(billingCycles.totalPriorityGB) as \"Total Priority GBytes\" by serviceLineNumber EndDate\n| dedup serviceLineNumber EndDate\n| stats sum(\"Total Priority GBytes\") by EndDate\n| stats sum(sum(Total Priority GBytes)) as TotalPriorityGBytes\n| eval Jan2025AnnualPool = 1500000\n| eval PoolRemaining=Jan2025AnnualPool-TotalPriorityGBytes\n| eval PercentUsed=TotalPriorityGBytes/Jan2025AnnualPool, PercentLeft=PoolRemaining/Jan2025AnnualPool\n| eval PercentUsed=round(PercentUsed*100,2).\" %\", PercentLeft=round(PercentLeft*100,2).\" %\"\n| eval PoolRemaining=tostring(PoolRemaining,\"commas\").\" GBytes\"\n| eval Jan2025AnnualPool=tostring(Jan2025AnnualPool,\"commas\").\" GBytes\"\n| eval TotalPriorityGBytes=tostring(TotalPriorityGBytes,\"commas\").\" GBytes\"\n| table Jan2025AnnualPool TotalPriorityGBytes PoolRemaining PercentUsed PercentLeft"
            },
            "name": "DataCalcsByTotalGB"
        },
        "ds_1lP3X4Pr_ds_NndZmh4f": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_np\"billingCycles.dailyDataUsage.date\"=\"*\"\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date ```Get the Billing Cycle date from the json path```\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=$reportMonthTok|s$\n| eval stopDate=strptime(startDate,\"%F\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| where UsageDate>=startDate and UsageDate<stopDate\n| stats max(billingCycles.totalPriorityGB) as \"Total Priority GBytes\" by serviceLineNumber\n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| stats sum(\"LLL.LL.starlink.Total Priority GBytes\") as TotalPriorityGBytes\n| eval Jan2025AnnualPool = 1500000\n| eval PoolRemaining=Jan2025AnnualPool-TotalPriorityGBytes\n| eval PercentUsed=TotalPriorityGBytes/Jan2025AnnualPool, PercentLeft=PoolRemaining/Jan2025AnnualPool\n| eval PercentUsed=round(PercentUsed*100,2).\" %\", PercentLeft=round(PercentLeft*100,2).\" %\"\n| eval PoolRemaining=tostring(PoolRemaining,\"commas\").\" GBytes\", TotalPriorityGBytes=tostring(TotalPriorityGBytes,\"commas\").\" GBytes\"\n| table Jan2025AnnualPool TotalPriorityGBytes PoolRemaining PercentUsed PercentLeft"
            },
            "name": "DataCalcsByTotalGBMonthly"
        },
        "ds_etIjh48m": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year \n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| eval UsageDate=strptime(UsageDate, \"%F\") \n| eval _time=UsageDate \n| eval UsageDate=strftime(UsageDate,\"%F\") \n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber _time \n| stats sum(priorityGB) as PriorityGBytes by _time\n| fit StateSpaceForecast PriorityGBytes output_metadata=true holdback=30day forecast_k=365day conf_interval=90 into \"ExpUsageForecast1\"\n| append [ | search index=\"ExpUsageForecast1\" | fields - lower* upper* ]\n| eval combined_gbytes = if(isnull(PriorityGBytes),'predicted(PriorityGBytes)', PriorityGBytes)\n| streamstats sum(combined_gbytes) as \"cumulative_gbytes\"\n| eval threshold_exceeded = if(cumulative_gbytes > 1500000, 1, 0)\n| where threshold_exceeded = 1 OR _time=strptime(\"2025-12-31\", \"%Y-%m-%d\")\n| eval forecast_gbytes=if(threshold_exceeded=1,min(cumulative_gbytes),cumulative_gbytes)\n| eval forecast_date=strftime(_time,\"%F\")\n| stats earliest(forecast_gbytes) as Forecast, earliest(forecast_date) as Date\n| eval Forecast=tostring(Forecast,\"commas\").\" GBytes\"\n| fields Forecast Date",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "forcastGBytes"
        },
        "ds_fzwMOhFb": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year \n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| eval UsageDate=strptime(UsageDate, \"%F\") \n| eval _time=UsageDate \n| eval UsageDate=strftime(UsageDate,\"%F\") \n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber _time \n| stats sum(priorityGB) as PriorityGBytes by _time\n| fit StateSpaceForecast PriorityGBytes output_metadata=true holdback=30day forecast_k=365day conf_interval=90 into \"ExpUsageForecast1\"\n| append [ | search index=\"ExpUsageForecast1\" | fields - lower* upper* ]\n| eval combined_gbytes = if(isnull(PriorityGBytes),'predicted(PriorityGBytes)', PriorityGBytes)\n| streamstats sum(combined_gbytes) as \"cumulative_gbytes\"\n| eval threshold_exceeded = if(cumulative_gbytes > 1500000, 1, 0)\n| where threshold_exceeded = 1 OR _time=strptime(\"2025-12-31\", \"%Y-%m-%d\")\n| eval forecast_gbytes=if(threshold_exceeded=1,min(cumulative_gbytes),cumulative_gbytes)\n| eval forecast_date=strftime(_time,\"%F\")\n| stats earliest(forecast_gbytes) as \"Forecast\", earliest(forecast_date) as \"Date\"\n| eval Forecast=tostring(Forecast,\"commas\").\" GBytes\"\n| fieldformat date=strftime(%Y-%m-%d)\n| fieldformat forecast_gbytes=numeric\n| table Forecast Date",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "Search_1"
        },
        "ds_m0Le8MqH": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_np\"billingCycles.dailyDataUsage.date\"=\"*\" earliest=@year\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date \n| spath output=EndDate path=billingCycles.endDate\n| eval UsageDate=strptime(UsageDate,\"%Y-%m-%d\")\n| eval UsageDate=strftime(UsageDate,\"%Y-%m-%d\")\n| eval startDate=\"2025-01-01\"\n| eval stopDate = strftime(ceiling(relative_time(now(), \"+1mon\")/86400)*86400, \"%Y-%m-%d\")\n| eval stopDate=relative_time(stopDate,\"+1Mon@mon\")\n| eval stopDate=strftime(stopDate,\"%F\")\n| where UsageDate>=startDate\n| eval Month=strftime(UsageDate, \"@mon\")\n| stats max(billingCycles.totalPriorityGB) as \"Total Priority GBytes\" by serviceLineNumber EndDate\n| dedup serviceLineNumber EndDate\n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| rename LLL.LL.starlink.* as *\n| stats sum(\"Total Priority GBytes\") as \"Total GBytes\" by EndDate\n| eval EndDate=strptime(EndDate,\"%Y-%m-%dT%H:%M:%S\")\n| eval EndDate=strftime(EndDate-1, \"%Y-%m\")\n| rename EndDate as \"End Date\"\n| addcoltotals \"Total GBytes\" labelfield=\"End Date\" label=Total",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "usageByMonth"
        },
        "ds_Ltuku3ee": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_np sourcetype=\"device_terminals\" \n      | spath path=data{}.userTerminalId output=userterminal\n      | spath path=data{}.nickname output=nickname\n      | spath path=data{}.kitSerialNumber output=kitserialnumber\n      | spath path=data{}.dishSerialNumber output=dishserialnumber\n      | spath path=data{}.serviceLineNumber output=servicelinenumber\n      | spath path=data{}.active output=terminal_active\n| where servicelinenumber!=\"null\"\n| where terminal_active=\"true\"\n| join type=left serviceLineNumber \n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \n    | spath output=\"CircuitID\" path=data.nickname \n    | spath output=StartDate path=data.startDate \n    | spath output=PublicIP path=data.publicIp \n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \n| join type=left left=LL right=location where LL.circuit.location=location.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \n| dedup LLL.LL.starlink.userterminal\n| stats count(\"LLL.LL.starlink.userterminal\"), distinct_count(\"LLL.LL.starlink.servicelinenumber\")",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "totalServiceLines"
        },
        "ds_yusj8fsW": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_starlink_prod \"billingCycles.dailyDataUsage.date\"=\"*\"\r\n| spath output=UsageDate path=billingCycles.dailyDataUsage.date\r\n| eval UsageDate=strptime(UsageDate, \"%F\")\r\n| eval _time=UsageDate\r\n| eval UsageDate=strftime(UsageDate,\"%F\")\r\n| stats max(billingCycles.dailyDataUsage.priorityGB) as priorityGB by serviceLineNumber _time\r\n| join type=left serviceLineNumber \r\n    [| search index=\"sat_leo_starlink_prod\" sourcetype=device_servicelines \"data.active\"=true \r\n    | spath output=\"serviceLineNumber\" path=data.serviceLineNumber \r\n    | spath output=\"CircuitID\" path=data.nickname \r\n    | spath output=StartDate path=data.startDate \r\n    | spath output=PublicIP path=data.publicIp \r\n    | eval StartDate=strftime(strptime(StartDate,\"%F\"),\"%F\")] \r\n| join type=left left=starlink right=circuit where starlink.CircuitID=circuit.circuitalias \r\n    [ search index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year] \r\n| join type=left left=LL right=location where LL.circuit.location=location.@id \r\n    [ search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year] \r\n| join type=left left=LLL right=customer where LLL.location.customer=customer.@id \r\n    [ search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year] \r\n| search customer.customername=\"$customer$\" LLL.location.sitename=\"$sitecode$\" \r\n| rename LLL.LL.starlink._time as _time\r\n| stats sum(\"LLL.LL.starlink.priorityGB\") as PriorityGBytes by _time\r\n| predict \"PriorityGBytes\" as prediction algorithm=LLP5 holdback=10 future_timespan=365 period=7 upper95=upper95 lower95=lower95\r\n| eval combined_gbytes = if(isnull(PriorityGBytes),'prediction', PriorityGBytes)\r\n| streamstats sum(combined_gbytes) as \"cumulative_gbytes\"\r\n| eval threshold_exceeded = if(cumulative_gbytes > 1500000, 1, 0)\r\n| where threshold_exceeded = 1 OR _time>=strptime(\"2025-12-31\", \"%Y-%m-%d\")\r\n| eval forecast_gbytes=if(threshold_exceeded=1,min(cumulative_gbytes),cumulative_gbytes)\r\n| eval test=strftime(_time,\"%F\")\r\n| eval forecast_gbytes=tostring(forecast_gbytes,\"commas\").\" GBytes\"\r\n| stats earliest(forecast_gbytes), earliest(test)",
                "queryParameters": {
                    "earliest": "@y",
                    "latest": "now"
                }
            },
            "name": "Prediction"
        },
        "ds_ExuF2p1D": {
            "type": "ds.search",
            "options": {
                "query": "| makeresults \r\n| eval current_month = strftime(now(), \"%m\")\r\n| eval current_month = current_month+1\r\n| eval months = mvrange(1, current_month, 1)\r\n| eval current_year = strftime(now(), \"%Y\")\r\n| mvexpand months\r\n| eval month_name = case(months == 1, \"January\", months == 2, \"February\", months == 3, \"March\", months == 4, \"April\", months == 5, \"May\", months == 6, \"June\", months == 7, \"July\", months == 8, \"August\", months == 9, \"September\", months == 10, \"October\", months == 11, \"November\", months == 12, \"December\")\r\n| eval first_of_month = case(months == 1, current_year.\"-01-01\", months == 2, current_year.\"-02-01\", months == 3, current_year.\"-03-01\", months == 4, current_year.\"-04-01\", months == 5, current_year.\"-05-01\", months == 6, current_year.\"-06-01\", months == 7, current_year.\"-07-01\", months == 8, current_year.\"-08-01\", months == 9, current_year.\"-09-01\", months == 10, current_year.\"-10-01\", months == 11, current_year.\"-11-01\", months == 12, current_year.\"-12-01\")\r\n| table month_name, first_of_month"
            },
            "name": "month_selected"
        },
        "ds_a053msMz": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year\n| join type=left left=circuit right=location where circuit.location=location.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year\n    ]\n    | join type=left left=L right=customer where L.location.customer=customer.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year\n     ]\n| rename L.* as *\n| search customer.customername=\"Frontline\" OR customer.customername=\"Verizon Wireless\" OR customer.customername=\"Satellite Solutions Group\"\n| table circuit.circuitalias location.sitename location.division customer.customername location.sitetype\n| stats count by customer.customername",
                "queryParameters": {
                    "earliest": "$global_time.earliest$",
                    "latest": "$global_time.latest$"
                }
            },
            "name": "select_customer"
        },
        "ds_w8dg8Cgz": {
            "type": "ds.search",
            "options": {
                "query": "index=sat_leo_ref sourcetype=sat_prov_circuit earliest=@year\n| join type=left left=circuit right=location where circuit.location=location.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_location earliest=@year\n    ]\n    | join type=left left=L right=customer where L.location.customer=customer.@id\n    [search index=sat_leo_ref sourcetype=sat_prov_customer earliest=@year\n     ]\n| rename L.* as *\n|  search customer.customername=\"$customer$\"\n| table circuit.circuitalias location.sitename location.division customer.customername location.sitetype\n| stats count by location.sitename"
            },
            "name": "select_sitecode"
        }
    },
    "visualizations": {
        "viz_dFzXu3CE": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_Ltuku3ee"
            },
            "title": "Service Line Count",
            "showProgressBar": false,
            "showLastUpdated": false,
            "description": "",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('distinct_count(servicelinenumber)')"
            },
            "hideWhenNoData": true
        },
        "viz_d7PEFudd": {
            "type": "splunk.column",
            "options": {
                "yAxisAbbreviation": "auto",
                "y2AxisAbbreviation": "auto",
                "showRoundedY2AxisLabels": false,
                "legendTruncation": "ellipsisMiddle",
                "showY2MajorGridLines": true,
                "xAxisLabelRotation": -45,
                "xAxisTitleVisibility": "show",
                "yAxisTitleVisibility": "show",
                "y2AxisTitleVisibility": "show",
                "yAxisScale": "linear",
                "showOverlayY2Axis": false,
                "stackMode": "auto",
                "showSplitSeries": false,
                "showIndependentYRanges": false,
                "legendDisplay": "off",
                "xAxisTitleText": "Usage Date"
            },
            "dataSources": {
                "primary": "ds_QJ0mC9KV"
            },
            "title": "Terminal Count Per Day",
            "description": "Data Valid only after 10/7/2024"
        },
        "viz_NvmfYXr4": {
            "type": "splunk.column",
            "options": {
                "yAxisAbbreviation": "auto",
                "y2AxisAbbreviation": "auto",
                "showRoundedY2AxisLabels": false,
                "legendTruncation": "ellipsisMiddle",
                "showY2MajorGridLines": true,
                "xAxisLabelRotation": -45,
                "xAxisTitleVisibility": "show",
                "yAxisTitleVisibility": "show",
                "y2AxisTitleVisibility": "show",
                "yAxisScale": "linear",
                "showOverlayY2Axis": false,
                "stackMode": "auto",
                "showIndependentYRanges": false,
                "legendDisplay": "off",
                "overlayFields": [],
                "xAxisTitleText": "Usage Date"
            },
            "dataSources": {
                "primary": "ds_lQWmxpr3"
            },
            "title": "Usage by Day",
            "description": ""
        },
        "viz_7tr3SEJw": {
            "type": "splunk.column",
            "dataSources": {
                "primary": "ds_j3Djhaz4_ds_xGilFeS6"
            },
            "title": "Top 10 Circuits by Usage",
            "options": {
                "legendDisplay": "off",
                "xAxisTitleText": "Circuit ID",
                "yAxisTitleText": "GByte Usage",
                "yAxisLabelVisibility": "show",
                "yAxisLineVisibility": "show",
                "yAxisMajorTickSize": 5,
                "yAxisMajorTickInterval": 2000,
                "yAxisMinorTickVisibility": "show",
                "yAxisMinorTickSize": 1,
                "xAxisLabelRotation": -45
            },
            "eventHandlers": [
                {
                    "type": "drilldown.linkToDashboard",
                    "options": {
                        "app": "sat_access",
                        "dashboard": "terminal_telemetry",
                        "tokens": [
                            {
                                "token": "input_circuitid",
                                "value": "row.Circuit ID.value"
                            }
                        ],
                        "newTab": true
                    }
                }
            ]
        },
        "viz_I1rYTOow": {
            "type": "splunk.bar",
            "dataSources": {
                "primary": "ds_pT7XFpER_ds_j3Djhaz4_ds_xGilFeS6"
            },
            "title": "Top 10 Circuit Usage Today",
            "showProgressBar": false,
            "showLastUpdated": false,
            "options": {
                "legendDisplay": "off"
            },
            "eventHandlers": [
                {
                    "type": "drilldown.linkToDashboard",
                    "options": {
                        "app": "sat_access",
                        "dashboard": "terminal_telemetry",
                        "tokens": [
                            {
                                "token": "input_circuitid",
                                "value": "row.Circuit ID.value"
                            }
                        ],
                        "newTab": true
                    }
                }
            ]
        },
        "viz_NYzcANPM": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_9Obr8Fit"
            },
            "title": "Selected TimeRange Total",
            "description": "",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('Total Usage')",
                "unit": ""
            }
        },
        "viz_7XHOPXMn": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_1lP3X4Pr_ds_NndZmh4f"
            },
            "title": "Monthly Total- ??",
            "description": "Total for Selected Month",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('TotalPriorityGBytes')"
            },
            "hideWhenNoData": true
        },
        "viz_vPYawkXr": {
            "type": "splunk.column",
            "options": {
                "dataValuesDisplay": "all"
            },
            "dataSources": {
                "primary": "ds_m0Le8MqH"
            },
            "title": "Usage by Month",
            "showProgressBar": false,
            "showLastUpdated": false
        },
        "viz_3NPE2JwF": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_yusj8fsW"
            },
            "title": "Data Usage Prediction",
            "description": "Data on Prediction Date",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('earliest(forecast_gbytes)')",
                "unit": ""
            }
        },
        "viz_CpGZ8nQK": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_yusj8fsW"
            },
            "title": "Data Usage Prediction Date",
            "description": "Date of Prediction",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('earliest(test)')",
                "unit": ""
            }
        },
        "viz_ir07RoxR": {
            "type": "splunk.singlevalue",
            "dataSources": {
                "primary": "ds_Ltuku3ee"
            },
            "title": "Terminal Count",
            "showProgressBar": false,
            "showLastUpdated": false,
            "description": "",
            "options": {
                "majorValue": "> sparklineValues | lastPoint()",
                "trendValue": "> sparklineValues | delta(-2)",
                "sparklineValues": "> primary | seriesByName('count(userterminal)')"
            },
            "hideWhenNoData": true
        },
        "viz_lBjYNd5y": {
            "type": "splunk.rectangle",
            "options": {
                "fillColor": "transparent",
                "strokeColor": "transparent"
            }
        }
    },
    "inputs": {
        "input_global_trp": {
            "type": "input.timerange",
            "options": {
                "token": "global_time",
                "defaultValue": "-24h@h,now"
            },
            "title": "Global Time Range"
        },
        "input_z9lMFEkJ": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "defaultValue": "*",
                "token": "customer"
            },
            "title": "Select Customer",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_a053msMz"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [
                    [
                        "All"
                    ],
                    [
                        "*"
                    ]
                ],
                "label": ">primary | seriesByName(\"customer.customername\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"customer.customername\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        },
        "input_MdEBA3Np": {
            "options": {
                "items": ">frame(label, value) | prepend(formattedStatics) | objects()",
                "token": "sitecode",
                "selectFirstSearchResult": true
            },
            "title": "Select Sitecode",
            "type": "input.dropdown",
            "dataSources": {
                "primary": "ds_w8dg8Cgz"
            },
            "context": {
                "formattedConfig": {
                    "number": {
                        "prefix": ""
                    }
                },
                "formattedStatics": ">statics | formatByType(formattedConfig)",
                "statics": [],
                "label": ">primary | seriesByName(\"location.sitename\") | renameSeries(\"label\") | formatByType(formattedConfig)",
                "value": ">primary | seriesByName(\"location.sitename\") | renameSeries(\"value\") | formatByType(formattedConfig)"
            }
        }
    },
    "layout": {
        "type": "grid",
        "options": {
            "width": 1440,
            "height": 960
        },
        "structure": [
            {
                "item": "viz_NYzcANPM",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 0,
                    "w": 718,
                    "h": 79
                }
            },
            {
                "item": "viz_7XHOPXMn",
                "type": "block",
                "position": {
                    "x": 718,
                    "y": 0,
                    "w": 324,
                    "h": 79
                }
            },
            {
                "item": "viz_ir07RoxR",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 79,
                    "w": 176,
                    "h": 85
                }
            },
            {
                "item": "viz_vPYawkXr",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 164,
                    "w": 664,
                    "h": 344
                }
            },
            {
                "item": "viz_7tr3SEJw",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 508,
                    "w": 664,
                    "h": 342
                }
            },
            {
                "item": "viz_d7PEFudd",
                "type": "block",
                "position": {
                    "x": 0,
                    "y": 850,
                    "w": 1440,
                    "h": 350
                }
            },
            {
                "item": "viz_dFzXu3CE",
                "type": "block",
                "position": {
                    "x": 176,
                    "y": 79,
                    "w": 196,
                    "h": 85
                }
            },
            {
                "item": "viz_lBjYNd5y",
                "type": "block",
                "position": {
                    "x": 372,
                    "y": 79,
                    "w": 1068,
                    "h": 85
                }
            },
            {
                "item": "viz_NvmfYXr4",
                "type": "block",
                "position": {
                    "x": 664,
                    "y": 164,
                    "w": 776,
                    "h": 344
                }
            },
            {
                "item": "viz_I1rYTOow",
                "type": "block",
                "position": {
                    "x": 664,
                    "y": 508,
                    "w": 776,
                    "h": 342
                }
            },
            {
                "item": "viz_CpGZ8nQK",
                "type": "block",
                "position": {
                    "x": 1042,
                    "y": 0,
                    "w": 171,
                    "h": 79
                }
            },
            {
                "item": "viz_3NPE2JwF",
                "type": "block",
                "position": {
                    "x": 1213,
                    "y": 0,
                    "w": 227,
                    "h": 79
                }
            }
        ],
        "globalInputs": [
            "input_global_trp",
            "input_z9lMFEkJ",
            "input_MdEBA3Np"
        ]
    },
    "title": "Starlink Usage Dashboard Clone(NEW CUSTOMER)",
    "description": "",
    "defaults": {
        "dataSources": {
            "ds.search": {
                "options": {
                    "queryParameters": {
                        "latest": "$global_time.latest$",
                        "earliest": "$global_time.earliest$"
                    }
                }
            }
        }
    }
}
